// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_monitor is a generated GoMock package.
package mock_monitor

import (
	context "context"
	monitor "github.com/go-masonry/mortar/interfaces/monitor"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockMetrics is a mock of Metrics interface
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// Counter mocks base method
func (m *MockMetrics) Counter(ctx context.Context, name string) monitor.Counter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Counter", ctx, name)
	ret0, _ := ret[0].(monitor.Counter)
	return ret0
}

// Counter indicates an expected call of Counter
func (mr *MockMetricsMockRecorder) Counter(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Counter", reflect.TypeOf((*MockMetrics)(nil).Counter), ctx, name)
}

// Gauge mocks base method
func (m *MockMetrics) Gauge(ctx context.Context, name string) monitor.Gauge {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gauge", ctx, name)
	ret0, _ := ret[0].(monitor.Gauge)
	return ret0
}

// Gauge indicates an expected call of Gauge
func (mr *MockMetricsMockRecorder) Gauge(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gauge", reflect.TypeOf((*MockMetrics)(nil).Gauge), ctx, name)
}

// Timer mocks base method
func (m *MockMetrics) Timer(ctx context.Context, name string) monitor.Timer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timer", ctx, name)
	ret0, _ := ret[0].(monitor.Timer)
	return ret0
}

// Timer indicates an expected call of Timer
func (mr *MockMetricsMockRecorder) Timer(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timer", reflect.TypeOf((*MockMetrics)(nil).Timer), ctx, name)
}

// Histogram mocks base method
func (m *MockMetrics) Histogram(ctx context.Context, name string) monitor.Histogram {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Histogram", ctx, name)
	ret0, _ := ret[0].(monitor.Histogram)
	return ret0
}

// Histogram indicates an expected call of Histogram
func (mr *MockMetricsMockRecorder) Histogram(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Histogram", reflect.TypeOf((*MockMetrics)(nil).Histogram), ctx, name)
}

// AddTag mocks base method
func (m *MockMetrics) AddTag(name, value string) monitor.Metrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTag", name, value)
	ret0, _ := ret[0].(monitor.Metrics)
	return ret0
}

// AddTag indicates an expected call of AddTag
func (mr *MockMetricsMockRecorder) AddTag(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTag", reflect.TypeOf((*MockMetrics)(nil).AddTag), name, value)
}

// Implementation mocks base method
func (m *MockMetrics) Implementation() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Implementation")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Implementation indicates an expected call of Implementation
func (mr *MockMetricsMockRecorder) Implementation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Implementation", reflect.TypeOf((*MockMetrics)(nil).Implementation))
}

// MockCounter is a mock of Counter interface
type MockCounter struct {
	ctrl     *gomock.Controller
	recorder *MockCounterMockRecorder
}

// MockCounterMockRecorder is the mock recorder for MockCounter
type MockCounterMockRecorder struct {
	mock *MockCounter
}

// NewMockCounter creates a new mock instance
func NewMockCounter(ctrl *gomock.Controller) *MockCounter {
	mock := &MockCounter{ctrl: ctrl}
	mock.recorder = &MockCounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCounter) EXPECT() *MockCounterMockRecorder {
	return m.recorder
}

// Inc mocks base method
func (m *MockCounter) Inc(delta int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inc", delta)
	ret0, _ := ret[0].(error)
	return ret0
}

// Inc indicates an expected call of Inc
func (mr *MockCounterMockRecorder) Inc(delta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inc", reflect.TypeOf((*MockCounter)(nil).Inc), delta)
}

// MockGauge is a mock of Gauge interface
type MockGauge struct {
	ctrl     *gomock.Controller
	recorder *MockGaugeMockRecorder
}

// MockGaugeMockRecorder is the mock recorder for MockGauge
type MockGaugeMockRecorder struct {
	mock *MockGauge
}

// NewMockGauge creates a new mock instance
func NewMockGauge(ctrl *gomock.Controller) *MockGauge {
	mock := &MockGauge{ctrl: ctrl}
	mock.recorder = &MockGaugeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGauge) EXPECT() *MockGaugeMockRecorder {
	return m.recorder
}

// Update mocks base method
func (m *MockGauge) Update(value float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockGaugeMockRecorder) Update(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGauge)(nil).Update), value)
}

// MockTimer is a mock of Timer interface
type MockTimer struct {
	ctrl     *gomock.Controller
	recorder *MockTimerMockRecorder
}

// MockTimerMockRecorder is the mock recorder for MockTimer
type MockTimerMockRecorder struct {
	mock *MockTimer
}

// NewMockTimer creates a new mock instance
func NewMockTimer(ctrl *gomock.Controller) *MockTimer {
	mock := &MockTimer{ctrl: ctrl}
	mock.recorder = &MockTimerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTimer) EXPECT() *MockTimerMockRecorder {
	return m.recorder
}

// Record mocks base method
func (m *MockTimer) Record(value time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Record", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Record indicates an expected call of Record
func (mr *MockTimerMockRecorder) Record(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Record", reflect.TypeOf((*MockTimer)(nil).Record), value)
}

// Start mocks base method
func (m *MockTimer) Start() monitor.Stopwatch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(monitor.Stopwatch)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockTimerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTimer)(nil).Start))
}

// MockStopwatch is a mock of Stopwatch interface
type MockStopwatch struct {
	ctrl     *gomock.Controller
	recorder *MockStopwatchMockRecorder
}

// MockStopwatchMockRecorder is the mock recorder for MockStopwatch
type MockStopwatchMockRecorder struct {
	mock *MockStopwatch
}

// NewMockStopwatch creates a new mock instance
func NewMockStopwatch(ctrl *gomock.Controller) *MockStopwatch {
	mock := &MockStopwatch{ctrl: ctrl}
	mock.recorder = &MockStopwatchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStopwatch) EXPECT() *MockStopwatchMockRecorder {
	return m.recorder
}

// Stop mocks base method
func (m *MockStopwatch) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockStopwatchMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStopwatch)(nil).Stop))
}

// MockHistogram is a mock of Histogram interface
type MockHistogram struct {
	ctrl     *gomock.Controller
	recorder *MockHistogramMockRecorder
}

// MockHistogramMockRecorder is the mock recorder for MockHistogram
type MockHistogramMockRecorder struct {
	mock *MockHistogram
}

// NewMockHistogram creates a new mock instance
func NewMockHistogram(ctrl *gomock.Controller) *MockHistogram {
	mock := &MockHistogram{ctrl: ctrl}
	mock.recorder = &MockHistogramMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHistogram) EXPECT() *MockHistogramMockRecorder {
	return m.recorder
}

// RecordValue mocks base method
func (m *MockHistogram) RecordValue(value float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordValue", value)
}

// RecordValue indicates an expected call of RecordValue
func (mr *MockHistogramMockRecorder) RecordValue(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordValue", reflect.TypeOf((*MockHistogram)(nil).RecordValue), value)
}

// RecordDuration mocks base method
func (m *MockHistogram) RecordDuration(value time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordDuration", value)
}

// RecordDuration indicates an expected call of RecordDuration
func (mr *MockHistogramMockRecorder) RecordDuration(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordDuration", reflect.TypeOf((*MockHistogram)(nil).RecordDuration), value)
}

// Start mocks base method
func (m *MockHistogram) Start() monitor.Stopwatch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(monitor.Stopwatch)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockHistogramMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockHistogram)(nil).Start))
}

// MockReporter is a mock of Reporter interface
type MockReporter struct {
	ctrl     *gomock.Controller
	recorder *MockReporterMockRecorder
}

// MockReporterMockRecorder is the mock recorder for MockReporter
type MockReporterMockRecorder struct {
	mock *MockReporter
}

// NewMockReporter creates a new mock instance
func NewMockReporter(ctrl *gomock.Controller) *MockReporter {
	mock := &MockReporter{ctrl: ctrl}
	mock.recorder = &MockReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReporter) EXPECT() *MockReporterMockRecorder {
	return m.recorder
}

// Connect mocks base method
func (m *MockReporter) Connect(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockReporterMockRecorder) Connect(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockReporter)(nil).Connect), ctx)
}

// Close mocks base method
func (m *MockReporter) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockReporterMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReporter)(nil).Close), ctx)
}

// Metrics mocks base method
func (m *MockReporter) Metrics() monitor.Metrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metrics")
	ret0, _ := ret[0].(monitor.Metrics)
	return ret0
}

// Metrics indicates an expected call of Metrics
func (mr *MockReporterMockRecorder) Metrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metrics", reflect.TypeOf((*MockReporter)(nil).Metrics))
}

// MockBuilder is a mock of Builder interface
type MockBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderMockRecorder
}

// MockBuilderMockRecorder is the mock recorder for MockBuilder
type MockBuilderMockRecorder struct {
	mock *MockBuilder
}

// NewMockBuilder creates a new mock instance
func NewMockBuilder(ctrl *gomock.Controller) *MockBuilder {
	mock := &MockBuilder{ctrl: ctrl}
	mock.recorder = &MockBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBuilder) EXPECT() *MockBuilderMockRecorder {
	return m.recorder
}

// SetAddress mocks base method
func (m *MockBuilder) SetAddress(hostPort string) monitor.Builder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAddress", hostPort)
	ret0, _ := ret[0].(monitor.Builder)
	return ret0
}

// SetAddress indicates an expected call of SetAddress
func (mr *MockBuilderMockRecorder) SetAddress(hostPort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAddress", reflect.TypeOf((*MockBuilder)(nil).SetAddress), hostPort)
}

// SetPrefix mocks base method
func (m *MockBuilder) SetPrefix(prefix string) monitor.Builder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPrefix", prefix)
	ret0, _ := ret[0].(monitor.Builder)
	return ret0
}

// SetPrefix indicates an expected call of SetPrefix
func (mr *MockBuilderMockRecorder) SetPrefix(prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrefix", reflect.TypeOf((*MockBuilder)(nil).SetPrefix), prefix)
}

// SetTags mocks base method
func (m *MockBuilder) SetTags(tags map[string]string) monitor.Builder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTags", tags)
	ret0, _ := ret[0].(monitor.Builder)
	return ret0
}

// SetTags indicates an expected call of SetTags
func (mr *MockBuilderMockRecorder) SetTags(tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTags", reflect.TypeOf((*MockBuilder)(nil).SetTags), tags)
}

// AddContextExtractors mocks base method
func (m *MockBuilder) AddContextExtractors(extractors ...monitor.ContextExtractor) monitor.Builder {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range extractors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddContextExtractors", varargs...)
	ret0, _ := ret[0].(monitor.Builder)
	return ret0
}

// AddContextExtractors indicates an expected call of AddContextExtractors
func (mr *MockBuilderMockRecorder) AddContextExtractors(extractors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContextExtractors", reflect.TypeOf((*MockBuilder)(nil).AddContextExtractors), extractors...)
}

// Build mocks base method
func (m *MockBuilder) Build() monitor.Reporter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build")
	ret0, _ := ret[0].(monitor.Reporter)
	return ret0
}

// Build indicates an expected call of Build
func (mr *MockBuilderMockRecorder) Build() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockBuilder)(nil).Build))
}
